from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
import numpy as np
from scipy import interpolate
import math
# x = np.linspace(0, 10, num=11, endpoint=True)
# y = np.cos(-x**2/9.0)
# xnew = np.linspace(0, 10, num=41, endpoint=True)
# f = interp1d(x, y)
# f2 = interp1d(x, y, kind='cubic')
# plt.plot(x, y, 'o', xnew, f(xnew), '-', xnew, f2(xnew), '--')
# plt.legend(['data', 'linear', 'cubic'], loc='best')
# plt.show()

# X = np.linspace(1, 9, 20)
# Y = [math.pow(0.7, x) for x in X]
# plt.plot(X, Y)
# plt.show()

def interplation2():
    from scipy.interpolate import interp1d
    import matplotlib.pyplot as plt

    y1 = [0.263, 0.260, 0.261, 0.258, 0.260, 0.257, 0.255, 0.257, 0.254, 0.253, 0.254, 0.250, 0.245, 0.240, 0.241, 0.240, 0.238, 0.236, 0.223, 0.222, 0.220, 0.200, 0.207, 0.206, 0.205,  0.203, 0.202, 0.202, 0.198, 0.199, 0.200, 0.203, 0.202, 0.201, 0.203, 0.202, 0.203, 0.202, 0.203, 0.204]
    y2 = [0.135, 0.126, 0.135, 0.130, 0.125, 0.129, 0.134, 0.132, 0.134, 0.132, 0.135, 0.137, 0.143, 0.142, 0.145, 0.143, 0.210, 0.225, 0.221, 0.245, 0.250, 0.250, 0.253, 0.251, 0.260, 0.268, 0.267, 0.266, 0.278, 0.276, 0.276, 0.277, 0.279, 0.278, 0.277, 0.276, 0.277, 0.277, 0.278, 0.277]
    y3 = [0.270, 0.281, 0.282, 0.286, 0.313, 0.314, 0.320, 0.337, 0.341, 0.342, 0.346, 0.351, 0.379, 0.380, 0.381, 0.382, 0.421, 0.431, 0.442, 0.456, 0.457, 0.456, 0.455, 0.452, 0.462, 0.465, 0.464, 0.464, 0.465, 0.463, 0.465, 0.466, 0.464, 0.467, 0.468, 0.467, 0.468, 0.469, 0.468, 0.468]
    y4 = [0.410, 0.412, 0.421, 0.420, 0.432, 0.442, 0.440, 0.430, 0.420, 0.424, 0.425, 0.423, 0.421, 0.431, 0.434, 0.432, 0.390, 0.340, 0.320, 0.300, 0.297, 0.289, 0.276, 0.260, 0.250, 0.236, 0.224, 0.202, 0.180, 0.178, 0.176, 0.175, 0.174, 0.175, 0.169, 0.168, 0.168, 0.167, 0.167, 0.166]

    x = np.arange(len(y1))
    # print(x)

    # f = interp1d(x, y)
    # f2 = interp1d(x, y, kind='quadratic')
    f1 = interp1d(x, y1, kind='quadratic')
    f2 = interp1d(x, y2, kind='quadratic')
    f3 = interp1d(x, y3, kind='quadratic')
    f4 = interp1d(x, y4, kind='quadratic')

    xnew = np.linspace(0, list(range(len(x))), num=600, endpoint=True)
    plt.plot(x, y1, 'r.-', label='UWB')
    plt.plot(x, y2, 'b.-', label='UGB')
    plt.plot(x, y3, 'y.-', label='UBGB')
    plt.plot(x, y4, 'g.-', label='UBWB')
    plt.plot(xnew, f1(xnew), 'r-')
    plt.plot(xnew, f2(xnew), 'b-')
    plt.plot(xnew, f3(xnew), 'y-')
    plt.plot(xnew, f4(xnew), 'g-')
    plt.legend(loc='best', prop={'family':'Times New Roman', 'size':22})
    # plt.legend(loc='best')

    # plt.legend(['UBI','UICI','UCI','UIFI'])
    # plt.legend(['data1','UBI', 'data2', 'UICI', 'data3', 'UCI', 'data4', 'UIFI'])
    # x, y2, '.', xnew, f2(xnew), 'b-',x, y3, '.', xnew, f3(xnew), 'y-',x, y4, '.', xnew, f4(xnew), 'g-')

    xticks = np.arange(start=0, stop=(len(y1) + 1), step=3)
    plt.xticks(xticks)
    plt.xlabel('Window Slice',fontproperties='Times New Roman', fontsize=22)
    plt.ylabel('Different Memory Path Intensity $x^{p_m}$ Overtime',fontproperties='Times New Roman', fontsize=22)
    plt.show()

    pass



def interpolation1():
    """
    https://docs.scipy.org/doc/scipy/tutorial/interpolate.html
    """

    from scipy.interpolate import interp1d
    import matplotlib.pyplot as plt

    y1 = [0.2, 0.2, 0.24, 0.3, 0.25, 0.28, 0.30, 0.26, 0.25, 0.27, 0.26, 0.27, 0.33, 0.3, 0.31, 0.33, 0.33, 0.4, 0.43, 0.46, 0.47, 0.49, 0.50, 0.5, 0.51, 0.51, 0.50, 0.50, 0.49, 0.50]
    y2 = [0.2, 0.22, 0.22, 0.23, 0.26, 0.27, 0.3, 0.2, 0.19, 0.18, 0.15, 0.14, 0.10, 0.07, 0.08, 0.07, 0.05, 0.06, 0.06, 0.05, 0.06, 0.05, 0.06, 0.06, 0.05, 0.05, 0.04, 0.05, 0.04, 0.04]
    y3 = [0.01, 0.02, 0.02, 0.10, 0.08, 0.09, 0.2, 0.2, 0.23, 0.24, 0.23, 0.25, 0.25, 0.26, 0.27, 0.37, 0.36, 0.35, 0.30, 0.31, 0.32, 0.32, 0.33, 0.31, 0.35, 0.36, 0.34, 0.33, 0.34, 0.33]
    y4 = [0.02, 0.03, 0.02, 0.08, 0.07, 0.07, 0.12, 0.15, 0.15, 0.18, 0.19, 0.18, 0.22, 0.23, 0.23, 0.23, 0.24, 0.25, 0.28, 0.27, 0.26, 0.27, 0.25, 0.27, 0.28, 0.27, 0.26, 0.27, 0.28,0.27]

    x = np.arange(len(y1))
    # print(x)

    # f = interp1d(x, y)
    # f2 = interp1d(x, y, kind='quadratic')
    f1 = interp1d(x, y1, kind='quadratic')
    f2 = interp1d(x, y2, kind='quadratic')
    f3 = interp1d(x, y3, kind='quadratic')
    f4 = interp1d(x, y4, kind='quadratic')

    xnew = np.linspace(0, list(range(len(x))), num=300, endpoint=True)
    plt.plot(x, y1, 'r.-',label='UBI')
    plt.plot(x, y2, 'b.-',label='UICI')
    plt.plot(x, y3, 'y.-',label='UCI')
    plt.plot(x, y4, 'g.-',label='UIFI')
    plt.plot(xnew, f1(xnew), 'r-')
    plt.plot(xnew, f2(xnew), 'b-')
    plt.plot(xnew, f3(xnew), 'y-')
    plt.plot(xnew, f4(xnew), 'g-')
    plt.legend(loc='best',prop={'family':'Times New Roman', 'size':22})
    # plt.legend(loc='best')

    # plt.legend(['UBI','UICI','UCI','UIFI'])
    # plt.legend(['data1','UBI', 'data2', 'UICI', 'data3', 'UCI', 'data4', 'UIFI'])
    # x, y2, '.', xnew, f2(xnew), 'b-',x, y3, '.', xnew, f3(xnew), 'y-',x, y4, '.', xnew, f4(xnew), 'g-')




    xticks = np.arange(start=0, stop=(len(y1)+1), step=2)
    plt.xticks(xticks)
    plt.xlabel('Window Slice',fontproperties='Times New Roman', fontsize=22)
    plt.ylabel('Different Memory Path Intensity $x^{p_m}$ Overtime',fontproperties='Times New Roman', fontsize=22)
    plt.show()

    pass



if __name__ == "__main__":
    # exponential_function()
    # polynomial_function()
    interpolation1()
    # interplation2()
    # print("COMPLETE!")
    # print("SUCCESS!")
